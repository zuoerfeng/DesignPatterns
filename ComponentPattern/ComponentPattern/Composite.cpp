#include "Composite.h"
#include <iostream>

using namespace std;

Component::Component()
{}

Component::~Component()
{}

void Component::Add(Component* com)
{
    cout << "add" << endl;
}

void Component::Remove(Component* com)
{
}

void Component::Operation()
{
    cout << "Component::Operation" << endl;
}

//默认是空，即默认接口是没有子类的（叶子节点，即只用继承，不用覆盖）
Component* Component::GetChild(int index)
{
    return NULL;
}


Leaf::Leaf()
{}

Leaf::~Leaf()
{}

void Leaf::Operation()
{
    cout<< "Leaf::Operation" <<endl;
}

Composite::Composite()
{
}

Composite::~Composite()
{}

void Composite::Add(Component* com)
{
    this->m_ComVec.push_back(com);
}

void Composite::Remove(Component* com)
{
    vector<Component*>::iterator iter = this->m_ComVec.begin();
    for(;iter!= this->m_ComVec.end();iter++){
        if((*iter) == com)
            break;
    }
    this->m_ComVec.erase(iter);        //删除操作针对的是迭代器，必须使用迭代器进行处理
}

//组件的操作，就是遍历所有子类，并执行子类的操作
void Composite::Operation()
{
    cout << "Composite::Operation" << endl;
    vector<Component*>::iterator iter = this->m_ComVec.begin();
    for(;iter!= this->m_ComVec.end();iter++)
    {
        (*iter)->Operation();        //注意子类不一定就是叶子节点，可能还是组件，这个时候还会进行递归
    }
}

//覆盖接口，对于组件来说，可以获取子类
Component* Composite::GetChild(int index)
{
    if(index < 0 || index > this->m_ComVec.size())
    {
        return NULL;
    }
    return this->m_ComVec[index];
}
